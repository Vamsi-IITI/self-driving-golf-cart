#!/usr/bin/python
#
# ROS node for steering controller
# publishes /dbw/steering_angle as Float64
#
# Developed & maintained by Neil Nie
# (c) Yongyang Nie, 2018, All rights Reserved
#

from std_msgs.msg import Float32, Header
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import rospy
import math


class MotionControlNode:

    def __init__(self):

        rospy.init_node('motion_control_node')

        # declare all subscribers
        rospy.Subscriber('/cmd_vel', Twist, callback=self.cmd_vel_callback, queue_size=5)
        rospy.Subscriber('/zed/odom', Odometry, callback=self.odom_callback, queue_size=5)

        # instance variables
        self.angle_scale = rospy.get_param('/motion_control_node/angle_scale')
        self.steering_angle = None
        self.current_velocity = None
        self.desire_velocity = None

        self.current_pose = None
        self.previous_pose = None
        self.previous_time = None
        self.current_time = None

        # declare all publishers
        self.steering_pub = rospy.Publisher('/vehicle/dbw/steering_cmds/', Float32, queue_size=3)
        self.current_vel_pub = rospy.Publisher('/vehicle/dbw/current_velocity', Float32, queue_size=3)
        self.desired_vel_pub = rospy.Publisher('/vehicle/dbw/desired_velocity', Float32, queue_size=3)

        rospy.loginfo("Vehicle Motion Control System Initialized")
        rospy.loginfo("Vehicle steering factor: " + str(self.angle_scale))

        rate = rospy.Rate(20)

        while not rospy.is_shutdown():

            if self.steering_angle is not None:
                self.steering_pub.publish(self.steering_angle)

            if self.current_pose is not None and self.previous_pose is not None:

                delta_d = self.distance(self.previous_pose.position.x, self.previous_pose.position.y,
                                        self.current_pose.position.x, self.current_pose.position.y)
                delta_t = float(self.current_time - self.previous_time) / float(pow(10, 9))

                self.current_velocity = round(delta_d / delta_t, 8)
                if self.current_velocity <= 0.0005 :
                    self.current_velocity = 0

                self.current_vel_pub.publish(self.current_velocity)
                self.desired_vel_pub.publish(self.desire_velocity)

            rate.sleep()

    # cv_camera callback
    def cmd_vel_callback(self, data):

        self.steering_angle = self.angle_scale * data.angular.z
        self.desire_velocity = data.linear.x * 0.85

    def odom_callback(self, data):

        self.previous_pose = self.current_pose
        self.current_pose = data.pose.pose

        self.previous_time = self.current_time
        self.current_time = data.header.stamp.nsecs

        # self.current_header_pub.publish(data.header)

    def distance(self, x_1, y_1, x_2, y_2):
        return math.sqrt(pow((x_2 - x_1), 2) + pow((y_2 - y_1), 2))


if __name__ == "__main__":

    try:
        MotionControlNode()
    except rospy.ROSInterruptException:
        pass